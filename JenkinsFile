pipeline {
  environment {
    registry = "priya2802/gitfocus_service_kube"
    registryCredential = 'GITFocus-DockerHub'
    dockerImage = ''
  }
  /*options {
      timeout(time: 5, unit: 'MINUTES') 
  }*/
  agent any
  tools { 
    maven 'maven 3.6.3' 
  }	
 
  stages {
    stage ("Building Jar") {
      steps {
	    sh "mvn -Dmaven.test.skip=true clean install" 
      }  
    }  
   
   stage ("Code Analysis") {
      steps {
	    withSonarQubeEnv('SonarQube') {
	         sh "mvn sonar:sonar -Dsonar.projectKey=GitFocus-Service"
		 }
     }
   }
   stage("Quality Check"){
      steps{
	     script{
      			def qualitygate = waitForQualityGate()
      			if (qualitygate.status != "OK") {
         		error "Pipeline aborted due to quality gate coverage failure: ${qualitygate.status}"
			}
	     	    }
           }
    }    
    stage('Building Image') {
      steps {
        script {
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
          //dockerImage = docker.build registry + ":1.1"
        }
      }
    }
    stage('Approval') {            
            steps {
                script {
		    timeout (time: 2, unit: 'MINUTES') {
                    def deploymentDelay = input id: 'Deploy', message: 'Push Image to DockerHub?', submitter: 'admin', parameters: [choice(choices: ['0', '1', '2', '3'], description: 'Hours to delay deployment?', name: 'deploymentDelay')]
                    sleep time: deploymentDelay.toInteger(), unit: 'HOURS'
		    }
                }
            }    
        }
    stage('Push to DockerHub') {
      steps{
        script {
          docker.withRegistry( '', registryCredential ) {
          dockerImage.push()
        }
      }
      }
    }
  }
  post {
    always {
    	cleanWs()
        emailext body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}"
    }
}
}
